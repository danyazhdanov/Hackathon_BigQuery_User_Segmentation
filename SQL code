WITH
  Status_Transactions_CRM AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY status_id) AS row_num,
    (CASE
        WHEN status_id = 'D' THEN 'Confirmed. Ordering item'
        WHEN status_id = 'E' THEN 'Confirmed'
        WHEN status_id = 'F' THEN 'Completed'
        WHEN status_id = 'H' THEN 'Order at the pick-up point'
        WHEN status_id = 'L' THEN 'Assembled'
        WHEN status_id = 'N' THEN 'Accepted'
        WHEN status_id = 'O' THEN 'In Progress'
        WHEN status_id = 'R' THEN 'Cancelled'
        WHEN status_id = 'S' THEN 'Shipped'
        WHEN status_id = 'W' THEN 'At the sorting center'
        WHEN status_id = 'Z' THEN 'On the way to the pick-up point'
    END
      ) AS Status_Description
  FROM
    `hackaton_new.crm_data` ),
 
Users_Latest_Status AS  -- List of users last orders
 
  (
  SELECT
    user_id,
    MAX(order_date) AS Latest_CRM_Date,
  FROM
    Status_Transactions_CRM
  GROUP BY
    user_id
  ORDER BY
    user_id ),
 
  Users_Latest_Status_Cancelled_Not_Unique AS   -- List of users with last order status 'Cancelled' in CRM (with duplicates)
  (
  SELECT
    lat.user_id,
    lat.Latest_CRM_Date,
    crm.status_id,
    sta.Status_Description
  FROM
    Users_Latest_Status AS lat
  INNER JOIN `hackaton_new.crm_data` AS crm
  ON lat.user_id = crm.user_id
  INNER JOIN Status_Transactions_CRM AS sta
  ON lat.user_id = sta.user_id
  AND crm.status_id = sta.status_id
  AND lat.Latest_CRM_Date = sta.order_date
  WHERE crm.status_id = 'R'
  ),
 
  Users_Latest_Status_Cancelled AS   -- List of users with last order status 'Cancelled' in CRM (no duplicates)
  (
  SELECT
    distinct *
  FROM
    Users_Latest_Status_Cancelled_Not_Unique 
  ),
 
  Users_Latest_Status_Confirmed_Not_Unique AS   -- List of users with last order status 'Confirmed' in CRM (with duplicates)
  (
  SELECT
    lat.user_id,
    lat.Latest_CRM_Date,
    crm.status_id,
    sta.Status_Description
  FROM
    Users_Latest_Status AS lat
  INNER JOIN `hackaton_new.crm_data` AS crm
  ON lat.user_id = crm.user_id
  INNER JOIN Status_Transactions_CRM AS sta
  ON lat.user_id = sta.user_id
  AND crm.status_id = sta.status_id
  AND lat.Latest_CRM_Date = sta.order_date
  WHERE crm.status_id = 'F'
  ),
 
  Users_Latest_Status_Confirmed AS   -- List of users with last order status 'Confirmed' in CRM (no duplicates)
  (
  SELECT
    distinct *
  FROM
    Users_Latest_Status_Confirmed_Not_Unique 
  ),
 
  Status_Count_per_User AS   -- Number of orders by status by user
  (
  SELECT
    sta.user_id,
    sta.status_id,
    sta.Status_Description,
    COUNT(sta.order_date) AS Status_Count
  FROM
    Status_Transactions_CRM AS sta
  GROUP BY
    user_id,
    status_id,
    Status_Description  
  ORDER BY
    user_id,
    status_id,
    Status_Description ),
 
  Users_Latest_Status_Not_Cancelled AS    -- List of users with last order status NOT 'Cancelled' in CRM (no duplicates)
  (
  SELECT
    lat.user_id,
    lat.Latest_CRM_Date,
    crm.status_id,
    sta.Status_Description
  FROM
    Users_Latest_Status AS lat
  INNER JOIN `hackaton_new.crm_data` AS crm
  ON lat.user_id = crm.user_id
  INNER JOIN Status_Transactions_CRM AS sta
  ON lat.user_id = sta.user_id
  AND crm.status_id = sta.status_id
  AND lat.Latest_CRM_Date = sta.order_date
  WHERE crm.status_id != 'R'
  ORDER BY user_id ),
    
  Status_Count_per_User_Not_Cancelled AS    -- Number of orders by status by user (without cancelled) 
  (
  SELECT
    sta.user_id,
    sta.status_id,
    sta.Status_Description,
    sta.Status_Count
  FROM
    Status_Count_per_User AS sta
  INNER JOIN Users_Latest_Status_Not_Cancelled AS nt_can
  ON nt_can.user_id = sta.user_id
    AND nt_can.status_id = sta.status_id  
  GROUP BY
    user_id,
    status_id,
    Status_Description,
    Status_Count    
  ORDER BY
    user_id,
    status_id,
    Status_Description ),
    
  Status_Grouped_per_Count AS   -- Number of orders grouped by status(without cancelled)
 
  (
  SELECT
    status_id,
    Status_Description,
    Status_Count,
    COUNT(user_id) AS Num_Users
  FROM
    Status_Count_per_User_Not_Cancelled
  GROUP BY
    status_id,
    Status_Description,
    Status_Count    
  ORDER BY
    status_id,
    Status_Description,
    Status_Count ),
    
  Status_Confirmed_Count_per_User AS    -- Number of orders with status 'Confirmed' by user (without cancelled)
  (
  SELECT
    sta.user_id,
    sta.status_id,
    sta.Status_Description,
    sta.Status_Count
  FROM
    Status_Count_per_User AS sta
  INNER JOIN Users_Latest_Status_Not_Cancelled AS nt_can
  ON nt_can.user_id = sta.user_id
    AND nt_can.status_id = sta.status_id  
  WHERE sta.status_id = 'F'      
  ORDER BY
    user_id,
    status_id,
    Status_Description 
 ),
    
  Status_Confirmed_Grouped_per_Count AS   -- Number of orders grouped with status 'Confirmed'(without cancelled)
 
  (
  SELECT
    status_id,
    Status_Description,
    Status_Count AS Num_Purchases,
    COUNT(user_id) AS Num_Users
  FROM
    Status_Confirmed_Count_per_User
  GROUP BY
    Status_Count,
    status_id,
    Status_Description
  HAVING status_id = 'F'      
  ORDER BY
    Status_Count,
    status_id,
    Status_Description ),
    
  Users_Latest_Status_Cancelled_Revenue_Not_Unique AS    -- Users with last order Cancelled, their orders (duplicates)
 
  (
  SELECT
    can.user_id,
    can.status_id,
    can.Status_Description,
    can.Latest_CRM_Date,
    transaction_id,
    order_date,
    revenue,
    platform,
    platform,
    discount,
    delivery_type,
    (CASE WHEN promo_code = '0' THEN 0
      ELSE 1
    END) AS Promo,
    CAST(SUBSTR(CAST(CURRENT_DATETIME() AS string), 1, 10) AS Date) as now,
    CAST(SUBSTR(CAST(Latest_CRM_Date AS string), 1, 10) AS Date) AS Latest_Transaction_Date,
    CAST(SUBSTR(CAST(order_date AS string), 1, 10) AS Date) AS Transaction_Date,
  FROM
    Users_Latest_Status_Cancelled AS can
  INNER JOIN `hackaton_new.crm_data` as crm
  ON  can.user_id = crm.user_id
  WHERE crm.status_id = 'F'     
  ORDER BY
    can.user_id,
    can.status_id,
    can.Status_Description ),
 
Users_Latest_Status_Cancelled_Revenue AS    -- Users with last order Cancelled, their orders (no duplicates)
 
(
SELECT
  distinct *
FROM
  Users_Latest_Status_Cancelled_Revenue_Not_Unique
),
 
Cancelled_Average_Check AS    -- -- Users with last order Cancelled, Average check before last cancelled transaction, Purchase amount
 
(
SELECT
  user_id,
  (CASE WHEN SUM(Promo) = 0 THEN 'NO'
  ELSE 'YES'
  END) AS Promo,
  max(extract(day from now - Latest_CRM_Date)) AS days_after_cancelled,
  SUM(cast(revenue as float64)) - SUM(cast(discount as float64)) AS revenue,                          --revenue
  COUNT(revenue) AS Num_Transactions,
  SUM(cast(revenue as float64)) / COUNT(revenue) AS Average_Check    -- Average check
FROM  Users_Latest_Status_Cancelled_Revenue
GROUP BY user_id
ORDER BY Average_Check, user_id
),
 
Users_Latest_Status_Confirmed_Revenue_Not_Unique AS    -- Loyal customers, their orders (duplicates)
 
  (
  SELECT
    can.user_id,
    can.status_id,
    can.Status_Description,
    can.Latest_CRM_Date,
    transaction_id,
    order_date,
    revenue,
    platform,
    platform,
    discount,
    delivery_type,
    (CASE WHEN promo_code = '0' THEN 0
      ELSE 1
    END) AS Promo,
    CAST(SUBSTR(CAST(CURRENT_DATETIME() AS string), 1, 10) AS Date) as now,
    CAST(SUBSTR(CAST(Latest_CRM_Date AS string), 1, 10) AS Date) AS Latest_Transaction_Date,
    CAST(SUBSTR(CAST(order_date AS string), 1, 10) AS Date) AS Transaction_Date,
  FROM
    Users_Latest_Status_Confirmed AS can
  INNER JOIN `hackaton_new.crm_data` as crm
  ON  can.user_id = crm.user_id
  WHERE crm.status_id = 'F'     
  ORDER BY
    can.user_id,
    can.status_id,
    can.Status_Description ),
 
Users_Latest_Status_Confirmed_Revenue AS    -- Loyal customers, their orders (no duplicates)
 
(
SELECT
  distinct *
FROM
  Users_Latest_Status_Confirmed_Revenue_Not_Unique
),
 
Confirmed_Average_Check AS    -- Loyal customers, Average check before last cancelled transaction, Purchase amount
 
(
SELECT
  user_id,
  (CASE WHEN SUM(Promo) = 0 THEN 'NO'
  ELSE 'YES'
  END) AS Promo,
  max(extract(day from now - Latest_CRM_Date)) AS days_after_last_transaction,
  SUM(cast(revenue as float64)) AS revenue,          -- Revenue
  SUM(cast(discount as float64)) AS discount,        -- Discount cumulative                  
  COUNT(revenue) AS Num_Transactions,
  SUM(cast(revenue as float64)) / COUNT(revenue) AS Average_Check    -- Average check
FROM  Users_Latest_Status_Confirmed_Revenue
GROUP BY user_id
ORDER BY Average_Check, user_id
)
 
SELECT * FROM Confirmed_Average_Check
 
 
 
-- Below are the queries to get the data:
 
--1) Number of confirmed/completed orders

SELECT * FROM Status_Confirmed_Grouped_per_Count -- Number of users, grouped by number of orders with status "Confirmed" (without users with last order "Cancelled")
 
/*
--2) List of customers with last order cancelled 
 
SELECT * FROM  Cancelled_Average_Check -- List of users with last order "Cancelled", Cumulative user revenue minus discounts,  Average check before last cancelled transaction, promo-code ever used or not, number of orders, number of days after cancelling

--3) List of loyal customers 
 
SELECT * FROM  Cancelled_Average_Check -- List of users with last order "Confirmed", Cumulative user revenue minus discounts, Average check before last transaction, promo-code ever used or not, number of orders, number of days after last transaction
 
--4) List of users with number of orders with status "Confirmed"
 
SELECT  * FROM  Status_Confirmed_Count_per_User  -- User, order status "Confirmed", number of orders with that order status (without users with last order "Cancelled")

--5) Number of users, grouped by number of orders by order status (all possible)
 
SELECT * FROM  Status_Grouped_per_Count  -- Number of users, grouped by number of orders by order status (all possible)  (without users with last order "Cancelled")

--6) List of users with number of orders by status 
 
SELECT * FROM  Status_Count_per_User_Not_Cancelled   -- User, order status, number of orders with that order status (without users with last order "Cancelled")

--7)  List of Users with last order status NOT "Cancelled"
 
SELECT * FROM Users_Latest_Status_Not_Cancelled 

*/
